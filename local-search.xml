<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STL常用组件</title>
    <link href="/2025/03/19/STL%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <url>/2025/03/19/STL%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该篇博客旨在忘记STL用法时查询</p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>二元组，可以组合任意两个不同类型（或相同类型）的元素。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;utility&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><table><thead><tr><th>变量名</th><th>内容</th></tr></thead><tbody><tr><td>first</td><td>第一个值</td></tr><tr><td>second</td><td>第二个值</td></tr></tbody></table><hr><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>栈。只允许在栈顶进行插入和删除操作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-comment">// s = &#123;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>top()</td><td>返回栈顶元素</td></tr><tr><td>empty()</td><td>返回是否为空</td></tr><tr><td>size()</td><td>返回元素个数</td></tr><tr><td>push(value)</td><td>在栈顶插入 <strong>value</strong></td></tr><tr><td>pop()</td><td>删除栈顶元素</td></tr></tbody></table><hr><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>队列。只允许在队尾插入元素，在队头删除元素</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定义与初始化-1"><a href="#定义与初始化-1" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-comment">// q = &#123;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="成员函数-1"><a href="#成员函数-1" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>front()</td><td>返回队头元素</td></tr><tr><td>back()</td><td>返回队尾元素</td></tr><tr><td>empty()</td><td>返回是否为空</td></tr><tr><td>size()</td><td>返回元素个数</td></tr><tr><td>push(value)</td><td>在队尾插入元素 <strong>value</strong></td></tr><tr><td>pop()</td><td>删除队头元素</td></tr></tbody></table><hr><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>优先队列。会自动排序，但其内部元素不可见，只允许访问最大的元素。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定义和初始化"><a href="#定义和初始化" class="headerlink" title="定义和初始化"></a>定义和初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::priority_queue&lt;<span class="hljs-type">int</span>&gt; pq<br></code></pre></td></tr></table></figure><p><strong>priority_queue</strong>默认为大根堆（只允许访问最大的元素）。以下是小根堆的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br>std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, std::greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq<br></code></pre></td></tr></table></figure><h3 id="成员函数-2"><a href="#成员函数-2" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>top()</td><td>返回最大的元素</td></tr><tr><td>empty()</td><td>返回是否为空</td></tr><tr><td>size()</td><td>返回元素个数</td></tr><tr><td>push(value)</td><td>往堆中插入 <strong>value</strong></td></tr><tr><td>pop()</td><td>删除最大的元素</td></tr></tbody></table><hr><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>动态数组。能根据需要自动扩容，也能手动调整容量。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定义与初始化-2"><a href="#定义与初始化-2" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-comment">// v = &#123;&#125;</span><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(n + <span class="hljs-number">5</span>)</span></span>;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">v3</span>(n + <span class="hljs-number">5</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h3 id="成员函数-3"><a href="#成员函数-3" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>at(pos)</td><td>返回第 <strong>pos</strong> 个元素</td></tr><tr><td>operater [pos]</td><td>返回第 <strong>pos</strong> 个元素</td></tr><tr><td>assign(count, value)</td><td>初始化为 <strong>count</strong> 个 <strong>value</strong></td></tr><tr><td>front()</td><td>返回第一个元素</td></tr><tr><td>back()</td><td>返回最后一个元素</td></tr><tr><td>begin()</td><td>返回头部迭代器</td></tr><tr><td>end()</td><td>返回尾部迭代器</td></tr><tr><td>empty()</td><td>返回是否为空</td></tr><tr><td>size()</td><td>返回元素个数</td></tr><tr><td>clear()</td><td>清空</td></tr><tr><td>push_back(value)</td><td>在尾部插入 <strong>value</strong></td></tr><tr><td>pop_back()</td><td>删除尾部元素</td></tr><tr><td>resize(count)</td><td>将容量调整为 <strong>count</strong></td></tr></tbody></table><blockquote><p>STL中的 begin() 均指向头部元素； end() 指向尾部元素的后继，而非尾部元素。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下是遍历 vector<int> a，并输出所有元素的三种方式</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; a.<span class="hljs-keyword">size</span>();i ++)<br>    cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = a.begin();it != a.end();it ++)<br>    cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v : a[n])<br>    cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><p>用vector代替邻接表保存有向图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_EDGES = <span class="hljs-number">100010</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; ver[MAX_EDGES], edge[MAX_EDGES];<br><br><span class="hljs-comment">//保存从 u 到 v 权值为 val 的有向边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ver[u].<span class="hljs-built_in">push_back</span>(v);<br>    edge[u].<span class="hljs-built_in">push_back</span>(val);<br>&#125;<br><span class="hljs-comment">//遍历从 x 出发的所有边</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; ver[u].<span class="hljs-built_in">size</span>();i ++)&#123;<br>    <span class="hljs-type">int</span> v = ver[u][i], val = edge[u][i];<br>    <span class="hljs-comment">//有向边 (u, v, val)</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>映射。相当于 <strong>[]</strong> 内可填任意键值（可以是 <strong>int</strong> , <strong>double</strong> 等任意类型的对象）的数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#incldue<span class="hljs-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="定义与初始化-3"><a href="#定义与初始化-3" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; m1;<br><br>std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; m2 = &#123; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>&#125; &#125;;<br>m2 = &#123; &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>&#125; &#125;<br></code></pre></td></tr></table></figure><h3 id="成员函数-4"><a href="#成员函数-4" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>at(key)</td><td>返回 <strong>key</strong> 映射的元素</td></tr><tr><td>operator[key]</td><td>返回 <strong>key</strong> 映射的元素，若没有则创造键</td></tr><tr><td>begin()</td><td>返回头部迭代器</td></tr><tr><td>end()</td><td>返回尾部迭代器</td></tr><tr><td>empty()</td><td>返回是否为空</td></tr><tr><td>size()</td><td>返回元素个数</td></tr><tr><td>clear()</td><td>清空</td></tr><tr><td>count(key)</td><td>返回 <strong>key</strong> 映射的元素的个数</td></tr><tr><td>insert({key, value})</td><td>创建从 <strong>key</strong> 到 <strong>value</strong> 的映射</td></tr><tr><td>erase(key)</td><td>删除从 <strong>key</strong> 出发的映射</td></tr></tbody></table><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于C++容器库包含的容器太多，在此处不一一赘述，更详细的教程请在<a href="https://zh.cppreference.com/w/cpp/container">此处</a>查找。<br>后续还会补充一些常用容器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网学习企划</title>
    <link href="/2025/03/16/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E4%BC%81%E5%88%92/"/>
    <url>/2025/03/16/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E4%BC%81%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="新的篇章"><a href="#新的篇章" class="headerlink" title="新的篇章"></a>新的篇章</h1><p>计划以计算机网络的学习作为自己在后端学习的起点。<br>当然也会同步学习java等后端开发所需要的语言。</p><h1 id="学习渠道"><a href="#学习渠道" class="headerlink" title="学习渠道"></a>学习渠道</h1><p>以B站的计算机网络视频<a href="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&vd_source=aee9954bc08c112ebede8a68e01d7f6b">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程</a>为主。<br>课件采用视频中所使用的PPT</p><blockquote><p><a href="https://pan.baidu.com/s/1EElOrkkY4WQqgeKHuGm-bg">https://pan.baidu.com/s/1EElOrkkY4WQqgeKHuGm-bg</a> 密码:1958</p></blockquote><h1 id="学习分享"><a href="#学习分享" class="headerlink" title="学习分享"></a>学习分享</h1><p>每学习完一个章节，都将发布一篇博客，记录这一章所学内容，希望自己能不断提高，变得更加优秀。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>起点</title>
    <link href="/2025/03/15/%E8%B5%B7%E7%82%B9/"/>
    <url>/2025/03/15/%E8%B5%B7%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="全新的开始"><a href="#全新的开始" class="headerlink" title="全新的开始"></a>全新的开始</h1><p>创建这个博客，希望能记录下自己一点一滴的变化</p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/14/hello-world/"/>
    <url>/2025/03/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
